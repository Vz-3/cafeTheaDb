
import java.sql.ResultSet;
import Utilities.DatabaseManager;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.Vector;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author V
 */
public class DynamicDatabase extends javax.swing.JFrame {

    /**
     * Creates new form DynamicDatabase
     */
    
    CardLayout fieldsPanelCard;
    DatabaseManager newDM;
    public DynamicDatabase() {
        initComponents();
        this.setResizable(false);
        this.setSize(916, 610);
        this.setTitle("CafeThea Database");
        this.setLocationRelativeTo(null);
        newDM = new DatabaseManager();
        fieldsPanelCard = (CardLayout)(fieldsPanel.getLayout());
        switchPanels(0);
        databaseTable.getTableHeader().setReorderingAllowed(false);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        base = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        databaseTable = new javax.swing.JTable();
        tablePanel = new javax.swing.JPanel();
        menuitem = new javax.swing.JButton();
        service = new javax.swing.JButton();
        resource = new javax.swing.JButton();
        supplier = new javax.swing.JButton();
        HomeBtn = new javax.swing.JButton();
        fieldsPanel = new javax.swing.JPanel();
        menuPanel = new javax.swing.JPanel();
        mCostField = new javax.swing.JTextField();
        mNameField = new javax.swing.JTextField();
        mCatLabel = new javax.swing.JLabel();
        mCostLabel = new javax.swing.JLabel();
        mNameLabel = new javax.swing.JLabel();
        mComboBox = new javax.swing.JComboBox<>();
        servicePanel = new javax.swing.JPanel();
        sNameLabel = new javax.swing.JLabel();
        sNameField = new javax.swing.JTextField();
        sCostLabel = new javax.swing.JLabel();
        sCostField = new javax.swing.JTextField();
        sDesField = new javax.swing.JTextField();
        sDesLabel = new javax.swing.JLabel();
        inventoryPanel = new javax.swing.JPanel();
        rNameLabel = new javax.swing.JLabel();
        rNameField = new javax.swing.JTextField();
        rCostField = new javax.swing.JTextField();
        rQtyField = new javax.swing.JTextField();
        rSupField = new javax.swing.JTextField();
        rSupLabel = new javax.swing.JLabel();
        rCostLabel = new javax.swing.JLabel();
        rQtyLabel = new javax.swing.JLabel();
        supplierPanel = new javax.swing.JPanel();
        suNameField = new javax.swing.JTextField();
        suConField = new javax.swing.JTextField();
        suNameLabel = new javax.swing.JLabel();
        suConLabel = new javax.swing.JLabel();
        crudPanel = new javax.swing.JPanel();
        findBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        createBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        idField = new javax.swing.JTextField();
        idLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        base.setBackground(new java.awt.Color(255, 255, 204));

        databaseTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        databaseTable.setFillsViewportHeight(true);
        databaseTable.setShowHorizontalLines(true);
        databaseTable.setShowVerticalLines(true);
        databaseTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                databaseTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(databaseTable);

        menuitem.setText("Menu");
        menuitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuitemActionPerformed(evt);
            }
        });

        service.setText("Service");
        service.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                serviceActionPerformed(evt);
            }
        });

        resource.setText("Inventory");
        resource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resourceActionPerformed(evt);
            }
        });

        supplier.setText("Supplier");
        supplier.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplierActionPerformed(evt);
            }
        });

        HomeBtn.setText("Home");
        HomeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HomeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tablePanelLayout = new javax.swing.GroupLayout(tablePanel);
        tablePanel.setLayout(tablePanelLayout);
        tablePanelLayout.setHorizontalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(menuitem)
                .addGap(18, 18, 18)
                .addComponent(service)
                .addGap(18, 18, 18)
                .addComponent(resource)
                .addGap(18, 18, 18)
                .addComponent(supplier)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(HomeBtn)
                .addGap(15, 15, 15))
        );
        tablePanelLayout.setVerticalGroup(
            tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(menuitem, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                    .addComponent(service, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(resource, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(supplier, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(HomeBtn))
                .addContainerGap())
        );

        fieldsPanel.setLayout(new java.awt.CardLayout());

        menuPanel.setBackground(new java.awt.Color(51, 255, 204));

        mCatLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        mCatLabel.setText("Category");

        mCostLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        mCostLabel.setText("Menu Cost");

        mNameLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        mNameLabel.setText("Menu Name");

        mComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tray Dishes", "Meals", "Drinks", "Jar Products" }));

        javax.swing.GroupLayout menuPanelLayout = new javax.swing.GroupLayout(menuPanel);
        menuPanel.setLayout(menuPanelLayout);
        menuPanelLayout.setHorizontalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mNameField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(mComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mCostField)
                    .addGroup(menuPanelLayout.createSequentialGroup()
                        .addGroup(menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mCostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(mCatLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        menuPanelLayout.setVerticalGroup(
            menuPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, menuPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mCostLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mCostField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mCatLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(99, Short.MAX_VALUE))
        );

        fieldsPanel.add(menuPanel, "card2");

        servicePanel.setBackground(new java.awt.Color(204, 255, 102));

        sNameLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        sNameLabel.setText("Name");

        sCostLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        sCostLabel.setText("Cost");

        sDesLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        sDesLabel.setText("Description");

        javax.swing.GroupLayout servicePanelLayout = new javax.swing.GroupLayout(servicePanel);
        servicePanel.setLayout(servicePanelLayout);
        servicePanelLayout.setHorizontalGroup(
            servicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(servicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(servicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sNameField)
                    .addGroup(servicePanelLayout.createSequentialGroup()
                        .addGroup(servicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sCostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sDesLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 8, Short.MAX_VALUE))
                    .addComponent(sCostField)
                    .addComponent(sDesField))
                .addContainerGap())
        );
        servicePanelLayout.setVerticalGroup(
            servicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(servicePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sCostLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sCostField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(sDesLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sDesField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        fieldsPanel.add(servicePanel, "card3");

        inventoryPanel.setBackground(new java.awt.Color(204, 0, 255));

        rNameLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        rNameLabel.setText("Name");

        rSupLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        rSupLabel.setText("Supplier");

        rCostLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        rCostLabel.setText("Cost");

        rQtyLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        rQtyLabel.setText("Quantity");

        javax.swing.GroupLayout inventoryPanelLayout = new javax.swing.GroupLayout(inventoryPanel);
        inventoryPanel.setLayout(inventoryPanelLayout);
        inventoryPanelLayout.setHorizontalGroup(
            inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rNameField)
                    .addComponent(rQtyField)
                    .addComponent(rSupField)
                    .addGroup(inventoryPanelLayout.createSequentialGroup()
                        .addGroup(inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rSupLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rCostLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rQtyLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 8, Short.MAX_VALUE))
                    .addComponent(rCostField))
                .addContainerGap())
        );
        inventoryPanelLayout.setVerticalGroup(
            inventoryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inventoryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rCostLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(rCostField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rQtyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rQtyField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rSupLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rSupField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );

        fieldsPanel.add(inventoryPanel, "card4");

        supplierPanel.setBackground(new java.awt.Color(204, 102, 0));

        suNameLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        suNameLabel.setText("Name");

        suConLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        suConLabel.setText("Contact");

        javax.swing.GroupLayout supplierPanelLayout = new javax.swing.GroupLayout(supplierPanel);
        supplierPanel.setLayout(supplierPanelLayout);
        supplierPanelLayout.setHorizontalGroup(
            supplierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(supplierPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(supplierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(suConField, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                    .addComponent(suNameField, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(suNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(suConLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        supplierPanelLayout.setVerticalGroup(
            supplierPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, supplierPanelLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(suNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(suNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(suConLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(suConField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(170, Short.MAX_VALUE))
        );

        fieldsPanel.add(supplierPanel, "card5");

        findBtn.setText("FIND");
        findBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        createBtn.setText("CREATE");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        updateBtn.setText("UPDATE");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout crudPanelLayout = new javax.swing.GroupLayout(crudPanel);
        crudPanel.setLayout(crudPanelLayout);
        crudPanelLayout.setHorizontalGroup(
            crudPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(crudPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(crudPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                    .addComponent(createBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(crudPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(findBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        crudPanelLayout.setVerticalGroup(
            crudPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(crudPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(crudPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .addComponent(updateBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(crudPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                    .addComponent(findBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        idLabel.setFont(new java.awt.Font("Cambria Math", 0, 18)); // NOI18N
        idLabel.setText("ID");

        javax.swing.GroupLayout baseLayout = new javax.swing.GroupLayout(base);
        base.setLayout(baseLayout);
        baseLayout.setHorizontalGroup(
            baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(baseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(baseLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(crudPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fieldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(idField)
                            .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        baseLayout.setVerticalGroup(
            baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, baseLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tablePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(baseLayout.createSequentialGroup()
                        .addComponent(idLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fieldsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(crudPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(base, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(base, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    String currentTableName = "";
    private void switchPanels(int panelNum) {
        switch (panelNum) {
            case 0:
                fieldsPanelCard.show(fieldsPanel, "card2");
                currentTableName = "menuitem";
                break;
            case 1:
                fieldsPanelCard.show(fieldsPanel, "card3");
                currentTableName = "service";
                break;
            case 2:
                fieldsPanelCard.show(fieldsPanel, "card4");
                currentTableName = "resource";
                break;
            case 3:
                fieldsPanelCard.show(fieldsPanel, "card5");
                currentTableName = "supplier";
                break;
            default:
                //System.out.println("Error - panelNum out of bounds");
                break;
        }
        //System.out.println("-"+currentTableName);;
        setDynamicTable(currentTableName); 
    }
    
    private void setDynamicTable(String tableName) {
        DefaultTableModel dynModel=(DefaultTableModel)databaseTable.getModel();
        dynModel.setRowCount(0);
        dynModel.setColumnCount(0);
        try {
            ResultSet deets = newDM.getTableSet(tableName);
            ResultSetMetaData metadeets = deets.getMetaData();
            if (deets.next()) {
                for (int i = 1;i<=metadeets.getColumnCount();i++) {
                    dynModel.addColumn(metadeets.getColumnName(i));
                }
            }
            //populate data
            ResultSet deets2 = newDM.getTableSet(tableName);
            ResultSetMetaData metadeets2 = deets2.getMetaData();
            while (deets2.next()) { //we only need to fetch the first (orderid) and the 6th, (scheddatetime)
                Vector row = new Vector();
                for (int i = 1; i <= metadeets2.getColumnCount(); i++) {
                    row.add(deets2.getString(i));
                }
                dynModel.addRow(row);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void clearAllFields() {
        idField.setText("");
        mNameField.setText("");
        mCostField.setText("");
        mComboBox.setSelectedIndex(0);
        sNameField.setText("");
        sCostField.setText("");
        sDesField.setText("");
        rNameField.setText("");
        rCostField.setText("");
        rQtyField.setText("");
        rSupField.setText("");
        suNameField.setText("");
        suConField.setText("");
        
    }
    
    private String getValueString() {
        String valuesString = "";
        switch (currentTableName) {
            case "menuitem":
                valuesString = "'"+mNameField.getText()+"',"+mCostField.getText()+",'"+mComboBox.getSelectedItem().toString()+"'";
                break;
            case "service":
                valuesString = "'"+sNameField.getText()+"',"+sCostField.getText()+",'"+sDesField.getText()+"'";
                break;
            case "resource":
                valuesString = "'"+rNameField.getText()+"',"+rCostField.getText()+","+rQtyField.getText()+","+rSupField.getText();
                break;
            case "supplier":
                valuesString = "'"+suNameField.getText()+"',"+suConField.getText();
                break;
            default:
                System.out.println("Error !!!");
                break;
        }
        return valuesString;
    }
    
    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        // TODO add your handling code here:
        try {
            String str = getValueString();
            newDM.insertOne(currentTableName, str);
        }
        catch (Exception e) {
            e.printStackTrace();    
        }
        finally {
            setDynamicTable(currentTableName);
        }
        clearAllFields();
    }//GEN-LAST:event_createBtnActionPerformed

    private void HomeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HomeBtnActionPerformed
        // TODO add your handling code here:
        MainHub main = new MainHub();
        dispose();
        main.setVisible(true);
        
    }//GEN-LAST:event_HomeBtnActionPerformed

    private void menuitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuitemActionPerformed
        // TODO add your handling code here:
        switchPanels(0);
    }//GEN-LAST:event_menuitemActionPerformed

    private void serviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_serviceActionPerformed
        // TODO add your handling code here:
        switchPanels(1);
    }//GEN-LAST:event_serviceActionPerformed

    private void resourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceActionPerformed
        // TODO add your handling code here:
        switchPanels(2);
    }//GEN-LAST:event_resourceActionPerformed

    private void supplierActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplierActionPerformed
        // TODO add your handling code here:
        switchPanels(3);
    }//GEN-LAST:event_supplierActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        // TODO add your handling code here:
        clearAllFields();
    }//GEN-LAST:event_updateBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // TODO add your handling code here:
        try {
            newDM.deleteOne(currentTableName, idField.getText());
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        finally {
            setDynamicTable(currentTableName);
        }
        clearAllFields();
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void findBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findBtnActionPerformed
        // TODO add your handling code here:
        try {
            List<String> list = newDM.regexQuery(newDM.selectId(currentTableName, idField.getText()));
            for (String lisp:list) {
                //System.out.println(":"+lisp);
            }
            idField.setText(list.get(0));
            switch (currentTableName) {
                case "menuitem":
                    mNameField.setText(list.get(1));
                    mCostField.setText(list.get(2));
                    String category = list.get(3);
                    if (category.equals("meals")) {
                        category = "1";
                    }
                    else if (category.equals("drinks")) {
                        category = "2";
                    }
                    else if (category.equals("tray dishes")) {
                        category = "0";
                    }
                    else if (category.equals("jar products")) {
                        category = "3";
                    }
                    System.out.println("Category:"+category);
                    mComboBox.setSelectedIndex(Integer.parseInt(category));
                    break;
                case "service":
                    sNameField.setText(list.get(1));
                    sCostField.setText(list.get(2));
                    sDesField.setText(list.get(3));
                    break;
                case "resource":
                    rNameField.setText(list.get(1));
                    rCostField.setText(list.get(2));
                    rQtyField.setText(list.get(3));
                    rSupField.setText(list.get(4));
                    break;
                case "supplier":
                    suNameField.setText(list.get(1));
                    suConField.setText(list.get(2));
                    break;
                default:
                    System.out.println("Error !!!");
                    break;
            }
        }
        catch (Exception e) {
            e.printStackTrace();    
        }
        finally {
            setDynamicTable(currentTableName);
        }
    }//GEN-LAST:event_findBtnActionPerformed

    private void databaseTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_databaseTableMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel)databaseTable.getModel();
        idField.setText(model.getValueAt(databaseTable.getSelectedRow(), 0).toString());
        switch (currentTableName) {
                case "menuitem":
                    mNameField.setText(model.getValueAt(databaseTable.getSelectedRow(), 1).toString());
                    mCostField.setText(model.getValueAt(databaseTable.getSelectedRow(), 2).toString());
                    String category = model.getValueAt(databaseTable.getSelectedRow(), 3).toString();
                    if (category.equals("meals")) {
                        category = "1";
                    }
                    else if (category.equals("drinks")) {
                        category = "2";
                    }
                    else if (category.equals("tray dishes")) {
                        category = "0";
                    }
                    else if (category.equals("jar products")) {
                        category = "3";
                    }
                    System.out.println("Category:"+category);
                    mComboBox.setSelectedIndex(Integer.parseInt(category));
                    break;
                case "service":
                    sNameField.setText(model.getValueAt(databaseTable.getSelectedRow(), 1).toString());
                    sCostField.setText(model.getValueAt(databaseTable.getSelectedRow(), 2).toString());
                    sDesField.setText(model.getValueAt(databaseTable.getSelectedRow(), 3).toString());
                    break;
                case "resource":
                    rNameField.setText(model.getValueAt(databaseTable.getSelectedRow(), 1).toString());
                    rCostField.setText(model.getValueAt(databaseTable.getSelectedRow(), 2).toString());
                    rQtyField.setText(model.getValueAt(databaseTable.getSelectedRow(), 3).toString());
                    rSupField.setText(model.getValueAt(databaseTable.getSelectedRow(), 4).toString());
                    break;
                case "supplier":
                    suNameField.setText(model.getValueAt(databaseTable.getSelectedRow(), 1).toString());
                    suConField.setText(model.getValueAt(databaseTable.getSelectedRow(), 2).toString());
                    break;
                default:
                    System.out.println("Error !!!");
                    break;
            }
        
        
    }//GEN-LAST:event_databaseTableMouseClicked

    private void updateById() {
        try {
            String tableName = currentTableName;
            int idVal = 0;
            String idName = newDM.getConfigure(tableName);
            String startStatement = "update "+tableName+" set ";
            //String betweenStatement = updateConfigure(tableName);
            Statement cursor = newDM.getCursor();
            Connection con = newDM.getCon();
            String betweenStatement  = "";
            //
            ResultSet resultSet = cursor.executeQuery("SELECT * FROM "+tableName);

            // Get the metadata of the ResultSet
            ResultSetMetaData resultSetMetaData = resultSet.getMetaData();

            // Get the number of columns in the ResultSet
            int columnCount = resultSetMetaData.getColumnCount();
              // Loop through all columns of the current row
            for (int i = 1; i <= columnCount; i++) {
                betweenStatement += resultSetMetaData.getColumnName(i) + " = ?, ";
            }
            betweenStatement = betweenStatement.substring(0, betweenStatement.length() - 2);
            //
            String endStatement = " where "+idName+" = "+idVal;
            String query = startStatement+betweenStatement+endStatement;
            PreparedStatement ps = con.prepareStatement(query);
            
            //this entire switch statement heavily relies on the gui component
            ps.setInt(1, 2);
            switch (tableName) {
                case "menuitem":
                    ps.setString(2, mNameField.getText());
                    ps.setFloat(3, Integer.parseInt(mCostField.getText()));
                    ps.setString(4, mComboBox.getSelectedItem().toString());
                    break;
                case "supplier":
                    ps.setString(2, "getComponent");
                    ps.setInt(2, 10);
                    break;
                case "resource":
                    ps.setString(2, "getComponent");
                    ps.setFloat(3, 10.0f);
                    ps.setInt(4, 100);
                    ps.setInt(5, 10);
                    ps.setInt(6, 1);
                    break;
//                case "customer":
//                    ps.setString(2, "getComponent");
//                    ps.setString(3, "fromGUI");
//                    ps.setInt(4, 123456789); //integer too large, welp
//                    ps.setString(5, "tightCoupling");
//                    break;
                case "service":
                    ps.setString(2, "getComponent");
                    ps.setFloat(3, 10.0f);
                    ps.setFloat(4, 10.0f);
                    ps.setString(5, "fromGUI");
                    break;
//                case "credentials":
//                    ps.setString(2, "getComponent");
//                    ps.setString(3, "fromGUI");
//                    break;
//                case "orderrequest":
//                    ps.setInt(2, 10);
//                    ps.setInt(3, 11);
//                    ps.setInt(4, 12);
//                    ps.setString(5, "getComponent");
//                    //declaration of calendar and date
//                    cldr = Calendar.getInstance();
//                    cldr.set(2023, Calendar.JANUARY, 1);//date desired ; year month day
//                    date = cldr.getTime();
//                    ps.setDate(6, new java.sql.Date(date.getTime()));
//                    ps.setString(7, "getComboBox"); //hmmm hope this works
//                    ps.setString(8, "fromGUI");
//                    ps.setFloat(9, 10.0f);
//                    break;
//                case "receipt":
//                    cldr = Calendar.getInstance();
//                    cldr.set(2023, Calendar.JANUARY, 1, 12, 0, 0);//date desired ; year month day hour minute second
//                    date = cldr.getTime();
//                    ps.setDate(2, new java.sql.Date(date.getTime()));
//                    ps.setInt(3, 10);
//                    break;
                default:
                    System.out.println("Error");
                    break;
            }
            //
            System.out.println(query);
            ps.executeUpdate();
            System.out.println(ps);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DynamicDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DynamicDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DynamicDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DynamicDatabase.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DynamicDatabase().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton HomeBtn;
    private javax.swing.JPanel base;
    private javax.swing.JButton createBtn;
    private javax.swing.JPanel crudPanel;
    private javax.swing.JTable databaseTable;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JPanel fieldsPanel;
    private javax.swing.JButton findBtn;
    private javax.swing.JTextField idField;
    private javax.swing.JLabel idLabel;
    private javax.swing.JPanel inventoryPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel mCatLabel;
    private javax.swing.JComboBox<String> mComboBox;
    private javax.swing.JTextField mCostField;
    private javax.swing.JLabel mCostLabel;
    private javax.swing.JTextField mNameField;
    private javax.swing.JLabel mNameLabel;
    private javax.swing.JPanel menuPanel;
    private javax.swing.JButton menuitem;
    private javax.swing.JTextField rCostField;
    private javax.swing.JLabel rCostLabel;
    private javax.swing.JTextField rNameField;
    private javax.swing.JLabel rNameLabel;
    private javax.swing.JTextField rQtyField;
    private javax.swing.JLabel rQtyLabel;
    private javax.swing.JTextField rSupField;
    private javax.swing.JLabel rSupLabel;
    private javax.swing.JButton resource;
    private javax.swing.JTextField sCostField;
    private javax.swing.JLabel sCostLabel;
    private javax.swing.JTextField sDesField;
    private javax.swing.JLabel sDesLabel;
    private javax.swing.JTextField sNameField;
    private javax.swing.JLabel sNameLabel;
    private javax.swing.JButton service;
    private javax.swing.JPanel servicePanel;
    private javax.swing.JTextField suConField;
    private javax.swing.JLabel suConLabel;
    private javax.swing.JTextField suNameField;
    private javax.swing.JLabel suNameLabel;
    private javax.swing.JButton supplier;
    private javax.swing.JPanel supplierPanel;
    private javax.swing.JPanel tablePanel;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
